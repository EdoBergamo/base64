input -> Hello World!
output -> SGVsbG8gV29ybGQh

input -> 
  	010010 -> 18 -> S
  	000110 ->  6 -> G
  	010101 -> 21 -> V
  	101100 -> 44 -> s
  	011011 -> 27 -> b
  	000110 ->  6 -> G
  	111100 -> 60 -> 8
  	100000 -> 32 -> g
  	010101 -> 21 -> V
  	110110 -> 54 -> 2
  	111101 -> 61 -> 9
  	110010 -> 50 -> y
  	011011 -> 27 -> b
  	000110 ->  6 -> G
  	010000 -> 16 -> Q
  	100001 -> 33 -> h

01001000 01100101 01101100 01101100
01101111 00100000 01010111 01101111
01110010 01101100 01100100 00100001

			            S      G      V      s
01001000 01100101 01101100 --> 010010 000110 010101 101100
                                    b      G      8      g
01101100 01101111 00100000 --> 011011 000110 111100 100000
                                    V      2      9      y
01010111 01101111 01110010 --> 010101 110110 111101 110010
                                    b      G      Q      h
01101100 01100100 00100001 --> 011011 000110 010000 100001

// First 6 Bit
    (in[in_index] & 0xFC) >> 2 --> (01001000 & 0xFC) >> 2

    // And Bit Operator
    01001000 & 01011011 = 01001000
    0xFC = 11111100
    01001011 & 11111100 = 01001000

    // Shift Operator
    01001000 >> 2 = 00010010

// Second 6 Bit
    ((in[in_index] & 0x3) << 4) | ((in[in_index+1] & 0xF0) >> 4)

    0x3  -> 00000011
    0xF0 -> 11110000

    ((01001000 & 00000011) << 4) | ((01100101 & 11110000) >> 4)

// Third 6 Bit
    ((in[in_index+1] & 0xF) << 2) | ((in[in_index+2] & 0xC0) >> 6)

    0xF  -> 00001111
    0xC0 -> 11000000

    ((in[in_index+1] & 00001111) << 2) | ((in[in_index+2] & 11000000) >> 6)

// Fourth 6 Bit
    in[in_index+2] && 0x3F

    0x3F -> 00111111

    in[in_index+2] && 00111111

---------------------------------------------

Padding Case 1

    input -> H
    output -> SA==

    01001000

    // First 6 Bit
        (in[in_index] & 0xFC) >> 2 --> (01001000 & 0xFC) >> 2

    // Second 6 Bit
        ((in[in_index] & 0x3) << 4)

    // Third 6 Bit
        =

    // Fourth 6 Bit
        =

---------------------------------------------

Padding Case 2
    
    input -> He
    output -> SGU=

    01001000 01100101

    // First 6 Bit
	(in[in_index] & 0xFC) >> 2 --> (01001000 & 0xFC) >> 2	
    
    // Second 6 Bit
	((in[in_index] & 0x3) << 4) | ((in[in_index+1] & 0xF0) >> 4)

    // Third 6 Bit
	((in[in_index+1] & 0xF) << 2)

    // Fourth 6 Bit
        =
